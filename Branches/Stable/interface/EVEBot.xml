<?xml version="1.0" encoding="UTF-8"?>
<ISUI>
	<window name='EVEBot'>
		<Visible>1</Visible>
		<BackGroundColor></BackGroundColor>
		<Border>0</Border>
		<X>200</X>
		<Y>300</Y>
		<Width>550</Width>
		<Height>320</Height>
		<Title>EVEBot Options</Title>
		<TitleBar template='EVESkin.Window.TitleBar'>
			<Width>100%</Width>
			<Height>20</Height>
			<Border>0</Border>
			<Children>
				<commandbutton name='Run EVEBot' template='EVESkin.Window.TitleBar.RunButton'>
					<OnLeftClick>
						EVEBot:Resume["Clicked Run"]
					</OnLeftClick>
				</commandbutton>
				<commandbutton name='Pause EVEBot' template='EVESkin.Window.TitleBar.PauseButton'>
					<OnLeftClick>
						EVEBot:Pause["Clicked Pause"]
					</OnLeftClick>
				</commandbutton>
				<Text name='EVEBot_TitleBar_Title' template='EVESkin.Font.TitleBar'>
					<X>200</X>
					<Y>3</Y>
					<Width>130</Width>
					<Height>20</Height>
					<Text>${Script[EVEBot].VariableScope.AppVersion}</Text>
					<OnLoad>
						This:SetText[${Script[EVEBot].VariableScope.AppVersion}]
					</OnLoad>
				</Text>
				<button	Name='Minimize'	template='EVESkin.Window.TitleBar.Minimize'>
					<OnLeftClick>
						UIElement[EVEBot].FindUsableChild[TitleBotStatus,Text]:Show
						UIElement[EVEBot].FindUsableChild[TitleBotStatusCap,Text]:Show
						UIElement[EVEBot].FindUsableChild[TitleBotXPStatus,Text]:Show
						UIElement[EVEBot].FindUsableChild[TitleBotXPCap,Text]:Show
					</OnLeftClick>
				</button>
				<button	Name='Maximize'	template='EVESkin.Window.TitleBar.Minimize'>
					<OnLeftClick>
						UIElement[EVEBot].FindUsableChild[TitleBotStatus,Text]:Hide
						UIElement[EVEBot].FindUsableChild[TitleBotXPStatus,Text]:Hide
						UIElement[EVEBot].FindUsableChild[TitleBotXPCap,Text]:Hide
						UIElement[EVEBot].FindUsableChild[TitleBotStatusCap,Text]:Hide
					</OnLeftClick>
				</button>
				<button	Name='Close' template='EVESkin.Window.TitleBar.Close'>
					<OnLeftClick>
						EVEBot:EndBot[]
					</OnLeftClick>
				</button>
			</Children>
		</TitleBar>
		<Children name="EVEBot_Children">
			<TabControl	Name='EVEBotOptionsTab' template='EVESkin.TabControl'>
				<X>0</X>
				<Y>4</Y>
				<Width>100%</Width>
				<Height>100%</Height>
				<Tabs>
					<Tab Name='Status'>
						<button	Name='SaveConfig' template='EveSkin.Window.ClickButton'>
							<text>Save Config</text>
							<x>r320</x>
							<y>10</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config:Save
							</OnLeftClick>
						</button>
						<button	Name='BroadcastBreak' template='EveSkin.Window.ClickButton'>
							<text>Broadcast Break</text>
							<x>r160</x>
							<y>10</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								relay all -event EVEBot_HARDSTOP "${Me.Name} - ${Script[EVEBot].VariableScope.Config.Common.CurrentBehavior} - Broadcast Break Button"
								Script[EVEBot].VariableScope.Logger:Log["Broadcast Break button forcing break!!!", LOG_MINOR]
							</OnLeftClick>
						</button>
						<button	Name='BroadcastResume' template='EveSkin.Window.ClickButton'>
							<text>Broadcast Resume</text>
							<x>r160</x>
							<y>30</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								Social.NextBreak:Set[0]
								Social.OnBreak:Set[FALSE]
								relay all -event EVEBot_ABORTHARDSTOP
								Script[EVEBot].VariableScope.Logger:Log["Broadcast resume button resuming from break!!!", LOG_MINOR]
							</OnLeftClick>
						</button>
						<button	Name='BroadcastRun' template='EveSkin.Window.ClickButton'>
							<text>Broadcast Run</text>
							<x>r160</x>
							<y>50</y>
							<width>150</width>
							<height>20</height>
							<OnLeftClick>
								relay all EVEBot:Resume["Resume via UI BroadcastRun"]
							</OnLeftClick>
						</button>
						<Text name='script_runtime'>
							<X>10</X>
							<Y>10</Y>
							<Width>115</Width>
							<Height>20</Height>
							<Text>Script Runtime:</Text>
						</Text>
						<Text name='script_runtime_data' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>10</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>${EVEBot.Runtime}</Text>
						</Text>

						<Text name='state' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>25</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>Action:</Text>
						</Text>
						<Text name='state_data' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>25</Y>
							<Width>100</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Config.Common.CurrentBehavior}</Text>
						</Text>
						<Text name='Currently Training' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>40</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Currently Training:</Text>
						</Text>
						<Text name='CurrentlyTrainingDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>40</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Skills.CurrentlyTrainingSkill}</Text>
						</Text>
						<Text name='Next to be trained' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>55</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Next Queued:</Text>
						</Text>
						<Text name='nexttobetrainedDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>55</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Skills.NextInLine}</Text>
						</Text>
						<Text name='Current Timestamp' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>80</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Current Timestamp:</Text>
						</Text>
						<Text name='CurrentTimestampDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>80</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Social.CurrentTime}</Text>
						</Text>
						<Text name='Next Break' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>95</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Next Break:</Text>
						</Text>
						<Text name='NextBreakDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>95</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Social.NextBreakTime}</Text>
						</Text>
						<Text name='Break Over' template='EVESkin.Font.Description'>
							<X>10</X>
							<Y>110</Y>
							<Width>175</Width>
							<Height>20</Height>
							<Text>Break Over:</Text>
						</Text>
						<Text name='BreakOverDATA' template='EVESkin.Font.Value'>
							<X>150</X>
							<Y>110</Y>
							<Width>150</Width>
							<Height>20</Height>
							<Text>${Script[EVEBot].VariableScope.Social.RestartTime}</Text>
						</Text>
						<console Name="StatusConsole" template='EVESkin.Console'>
							<X>5</X>
							<Y>r120</Y>
							<Width>97.5%</Width>
							<Height>115</Height>
						</console>
					</Tab>

					<Tab Name='Main'>
						<Text name='CurrentBehaviorLabel'>
							<X>10</X>
							<Y>10</Y>
							<Width>70</Width>
							<Height>10</Height>
							<Text>Behavior</Text>
						</Text>
						<combobox name='CurrentBehavior'>
							<X>80</X>
							<Y>10</Y>
							<Width>250</Width>
							<Height>15</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='1'>Idle</Item>
							</Items>
							<OnSelect>
								if ${This.SelectedItem.Text.NotNULLOrEmpty}
								{
									Logger:Log["Current behavior switched to ${This.SelectedItem.Text}"]
									Script[EVEBot].VariableScope.Config.Common:CurrentBehavior[${This.SelectedItem.Text}]
								}
							</OnSelect>
						</combobox>
						<Textentry name='MinimumDronesInBay'>
							<X>10</X>
							<Y>30</Y>
							<Width>32</Width>
							<Height>18</Height>
							<MaxLength>2</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.DronesInBay}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetDronesInBay[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='MinimumDronesInBayText'>
							<X>44</X>
							<Y>30</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Minimum Drones in Bay</Text>
							<AutoTooltip>This will set the amount of drones you want in your drone bay.</AutoTooltip>
						</Text>
						<Text name='lblMaxRuntime'>
							<X>10</X>
							<Y>130</Y>
							<Width>130</Width>
							<Height>18</Height>
							<Text>Max Run Hours</Text>
							<AutoTooltip>The maximum hours to run the script before it aborts.</AutoTooltip>
						</Text>
						<Textentry name='tbMaxRuntime'>
							<X>140</X>
							<Y>130</Y>
							<Width>32</Width>
							<Height>18</Height>
							<MaxLength>3</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.MaxRuntime}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetMaxRuntime[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblIRCServer'>
							<X>10</X>
							<Y>160</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Server</Text>
							<AutoTooltip>Enter an server address if you want to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCServer'>
							<X>140</X>
							<Y>160</Y>
							<Width>200</Width>
							<Height>18</Height>
							<MaxLength>50</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCServer}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCServer[${This.Text}]
								}
							</OnChange>
						</Textentry>

						<Text name='lblIRCChannel'>
							<X>10</X>
							<Y>180</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Channel</Text>
							<AutoTooltip>Enter an channel name if you want to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCChannel'>
							<X>140</X>
							<Y>180</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>25</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCChannel}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCChannel[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblIRCUser'>
							<X>10</X>
							<Y>200</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Username</Text>
							<AutoTooltip>Enter an username if you want to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCUser'>
							<X>140</X>
							<Y>200</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>25</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCUser}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCUser[${This.Text}]
								}
							</OnChange>
						</Textentry>

						<Text name='lblIRCPassword'>
							<X>10</X>
							<Y>220</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>IRC Password</Text>
							<AutoTooltip>Enter a password if you need one to use IRC</AutoTooltip>
						</Text>
						<Textentry name='tbIRCPassword'>
							<X>140</X>
							<Y>220</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>25</MaxLength>
							<PasswordCharacter>*</PasswordCharacter>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Common.IRCPassword}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Common:SetIRCPassword[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<checkbox Name='cbUseSound'>
							<X>10</X>
							<Y>240</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Enable sound</Text>
							<AutoTooltip>Enable audio events</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Common.UseSound}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Common:SetUseSound[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='cbDisable3D'>
							<X>110</X>
							<Y>240</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Disable 3D Rendering</Text>
							<AutoTooltip>Disable EVE 3D Rendering</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Common.Disable3D}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Common:SetDisable3D[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='cvSortBeltsRandom'>
							<X>250</X>
							<Y>240</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Sort Asteroid Belts Randomly</Text>
							<AutoTooltip>Sort asteroid belt lists randomly, instead of alphabetically</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Common.SortBeltsRandom}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Common:SortBeltsRandom[${This.Checked}]
							</OnLeftClick>
						</checkbox>
					</Tab>

					<Tab name='Miner'>
						<checkbox Name='cbStripMine'>
							<X>200</X>
							<Y>10</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Strip Mine Area</Text>
							<AutoTooltip>Strip Mine the immediate area to nothing before moving</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.StripMine}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetStripMine[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='cbBookMarkLastPosition'>
							<X>10</X>
							<Y>30</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Bookmark Last Position</Text>
							<AutoTooltip>Will bookmark the last mining location when the hold fills, and return to that spot after emptying the hold.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.BookMarkLastPosition}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetBookMarkLastPosition[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Textentry name='MiningRangeMultipler'>
							<X>200</X>
							<Y>30</Y>
							<Width>45</Width>
							<Height>18</Height>
							<MaxLength>6</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Miner.MiningRangeMultipler}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Miner:SetMiningRangeMultipler[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='MiningRangeMultiplerText'>
							<X>275</X>
							<Y>30</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Mining Range Multipler</Text>
							<AutoTooltip>Maximum slowboat distance is mining range * this</AutoTooltip>
						</Text>
						<Textentry name='tbCargoThreshold'>
							<X>200</X>
							<Y>50</Y>
							<Width>65</Width>
							<Height>18</Height>
							<MaxLength>8</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Miner.CargoThreshold}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Miner:SetCargoThreshold[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='lbCargoThreshold'>
							<X>275</X>
							<Y>50</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Cargo Full Threshold</Text>
							<AutoTooltip>Cargo hold >= this value means cargo hold full</AutoTooltip>
						</Text>
						<Text name='cbJetCanNameText'>
							<X>200</X>
							<Y>70</Y>
							<Width>100</Width>
							<Height>18</Height>
							<Text>JetCan Name: </Text>
						</Text>
						<combobox name='cbJetCanName'>
							<X>300</X>
							<Y>70</Y>
							<Width>150</Width>
							<Height>15</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='1'>CorpTicker Time</Item>
								<Item Value='2'>CorpTicker:Time</Item>
								<Item Value='3'>CorpTicker_Time</Item>
								<Item Value='4'>CorpTicker.Time</Item>
								<Item Value='5'>CorpTicker</Item>
								<Item Value='6'>Time</Item>
								<Item Value='7'>FirstName Time</Item>
								<Item Value='8'>FirstName</Item>
								<Item Value='9'>CharName</Item>
								<Item Value='10'>Do Not Rename</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Miner:SetJetCanNaming[${This.SelectedItem.Value}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${Script[EVEBot].VariableScope.Config.Miner.JetCanNaming}]
							</OnLoad>
						</combobox>
						<checkbox Name='cbDistributeLasers'>
							<X>10</X>
							<Y>50</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Distributed Laser Targeting</Text>
							<AutoTooltip>When checked only one laser will be activated per locked asteroid.  Uncheck to focus all lasers on a single asteroid.  In general, this should be checked.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.DistributeLasers}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetDistributeLasers[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox Name='cbUseFieldBookmarks'>
							<X>10</X>
							<Y>70</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Use Belt Bookmarks</Text>
							<AutoTooltip>When checked the miner will warp to asteroid belt bookmarks instead of the belts themselves.  See the labels Tab for bookmark prefix requirements.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.UseFieldBookmarks}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetUseFieldBookmarks[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbMiningDrones'>
							<X>10</X>
							<Y>90</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Use Mining Drones </Text>
							<AutoTooltip>When checked mining drones will be used instead of combat drones</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.UseMiningDrones}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetUseMiningDrones[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbMasterMinerMode'>
							<X>400</X>
							<Y>130</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Group Master </Text>
							<AutoTooltip>When checked this will be the master in group mining, You should only have one master</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.MasterMode}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetMasterMode[${This.Checked}]
								if !${This.Checked}
								{
									relay all -event EVEBot_Master_Notify ""
								}
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbGroupMinerMode'>
							<X>400</X>
							<Y>150</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Group Mode </Text>
							<AutoTooltip>When checked will tell evebot to mine as a group</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.GroupMode}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetGroupMode[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbGroupMinerModeKeepRange'>
							<X>400</X>
							<Y>170</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Keep Range </Text>
							<AutoTooltip>When checked will tell evebot to stay within range of specific person listed below</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.GroupModeAtRange}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetGroupModeAtRange[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbGroupMinerModeKeepBoostRange'>
							<X>400</X>
							<Y>190</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Keep Boost Range </Text>
							<AutoTooltip>When checked will tell evebot to stay within boost range of the master</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.GroupModeAtBoostRange}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetGroupModeAtBoostRange[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbOrcaWrecks'>
							<X>300</X>
							<Y>150</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Loot wrecks </Text>
							<AutoTooltip>When checked this will have your orca tractor and loot wrecks (Must have a tractor beam)</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.OrcaTractorLoot}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetOrcaTractorLoot[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbCompressOreMode'>
							<X>300</X>
							<Y>170</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Compress Ore</Text>
							<AutoTooltip>When this is checked miners will attempt to compress ore</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.CompressOreMode}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetCompressOreMode[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbSoloCompressOreMode'>
							<X>300</X>
							<Y>190</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Solo Compress Ore</Text>
							<AutoTooltip>When this is checked, someone not running evebot is running compression</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.SoloCompressOreMode}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetSoloCompressOreMode[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<slider name='AvoidPlayerRange'>
							<X>10</X>
							<Y>110</Y>
							<Width>40</Width>
							<Height>18</Height>
							<Range>100000</Range>
							<OnLoad>
								This:SetValue[${Script[EVEBot].VariableScope.Config.Miner.AvoidPlayerRange}]
							</OnLoad>
							<OnChange>
								Script[EVEBot].VariableScope.Config.Miner:SetAvoidPlayerRange[${Int[${This.Value}]}]
								UIElement[AvoidPlayerRangeLabel@Miner@EVEBotOptionsTab@EVEBot]:SetText["Min. Distance to Players: ${EVEBot.MetersToKM_Str[${This.Value}]}"]
							</OnChange>
						</slider>
						<Text name='AvoidPlayerRangeLabel'>
							<X>55</X>
							<Y>110</Y>
							<Width>300</Width>
							<Height>10</Height>
							<Text>Min. Distance to Players: 0km</Text>
							<AutoTooltip>Minimum distance we will keep other players at</AutoTooltip>
							<OnLoad>
								This:SetText["Min. Distance to Players: ${EVEBot.MetersToKM_Str[${UIElement[AvoidPlayerRange@Miner@EVEBotOptionsTab@EVEBot].Value}]}"]
							</OnLoad>
						</Text>
						<checkbox name='cbStandingDetection'>
							<X>10</X>
							<Y>130</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Mine Alone: Standing Detection</Text>
							<AutoTooltip>When checked you will move to another field when and if a player enters yours and is below the standing you set. (Doesn't Include Gang Members)</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.StandingDetection}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetStandingDetection[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<combobox name='cbLowestStanding'>
							<X>210</X>
							<Y>130</Y>
							<Width>50</Width>
							<Height>15</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='-11'>-11</Item>
								<Item Value='-10'>-10</Item>
								<Item Value='-5'>-5</Item>
								<Item Value='0'>0</Item>
								<Item Value='5'>5</Item>
								<Item Value='10'>10</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Miner:SetLowestStanding[${This.SelectedItem.Value}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Miner.LowestStanding}].ID}]
							</OnLoad>
						</combobox>
						<checkbox Name='cbIceMining'>
							<X>10</X>
							<Y>150</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Ice Mining</Text>
							<Command>Script[EVEBot].VariableScope.Config.Miner:SetIceMining[FALSE]</Command>
							<CommandChecked>Script[EVEBot].VariableScope.Config.Miner:SetIceMining[TRUE]</CommandChecked>
							<Data>${Script[EVEBot].VariableScope.Config.Miner.IceMining}</Data>
							<AutoTooltip>Check to mine ICE Fields instead of Asteroid Fields.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.IceMining}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetIceMining[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Text name='MinimumSecurityStatusLabel'>
							<X>10</X>
							<Y>170</Y>
							<Width>250</Width>
							<Height>18</Height>
							<Text>Min. Security Status</Text>
						</Text>
						<Textentry name='MinimumSecurityStatus'>
							<X>175</X>
							<Y>168</Y>
							<Width>45</Width>
							<Height>18</Height>
							<MaxLength>6</MaxLength>
							<AutoTooltip>Move to another field when a player enters yours and is below the security status you set</AutoTooltip>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Miner.MinimumSecurityStatus}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Miner:SetMinimumSecurityStatus[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='DeliveryLocationTypeLabel'>
							<X>10</X>
							<Y>190</Y>
							<Width>250</Width>
							<Height>18</Height>
							<Text>ORE Delivery Configuration</Text>
						</Text>
						<Text name='DeliveryLocationTypeText'>
							<X>15</X>
							<Y>210</Y>
							<Width>110</Width>
							<Height>18</Height>
							<Text>Location Type</Text>
							<AutoTooltip>Type of the destination to delivery to, such as POS, Station, Outpost, etc</AutoTooltip>
						</Text>
						<combobox name='DeliveryLocationType'>
							<X>135</X>
							<Y>210</Y>
							<Width>150</Width>
							<Height>15</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='1'>Station</Item>
								<Item Value='2'>Hangar Array</Item>
								<Item Value='3'>Jetcan</Item>
								<Item Value='4'>XLarge Ship Assembly Array</Item>
								<Item Value='5'>Large Ship Assembly Array</Item>
								<Item Value='6'>Orca</Item>
								<Item Value='7'>No Delivery</Item>
								<Item Value='8'>Compression Array</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Miner:SetDeliveryLocationType[${This.SelectedItem.Value}]
								Script[EVEBot].VariableScope.Config.Miner:SetDeliveryLocationTypeName[${This.SelectedItem.Text}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${Script[EVEBot].VariableScope.Config.Miner.DeliveryLocationType}]
							</OnLoad>
						</combobox>
						<checkbox name='cbSafeJetcan'>
							<X>300</X>
							<Y>210</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Safe Jetcan </Text>
							<AutoTooltip>When checked this will force your miners to wait until the pilot specified in Location Name is within 20km before dropping a jetcan.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Miner.SafeJetcan}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Miner:SetSafeJetcan[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<Text name='DeliveryLocationText'>
							<X>15</X>
							<Y>225</Y>
							<Width>110</Width>
							<Height>18</Height>
							<Text>Location Name</Text>
							<AutoTooltip>Either enter the delivery location here, or it will default to the last station we undock at</AutoTooltip>
						</Text>
						<Textentry name='DeliveryLocation'>
							<X>135</X>
							<Y>225</Y>
							<Width>350</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Miner.DeliveryLocation}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Miner:SetDeliveryLocation[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='PanicLocationLabel'>
							<X>10</X>
							<Y>250</Y>
							<Width>250</Width>
							<Height>18</Height>
							<Text>Panic Location</Text>
							<AutoTooltip>Station bookmark where you want to dock if something goes terribly wrong.  Can be in a different system.</AutoTooltip>
						</Text>
						<Textentry name='PanicLocation'>
							<X>135</X>
							<Y>250</Y>
							<Width>350</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Miner.PanicLocation}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Miner:SetPanicLocation[${This.Text}]
								}
							</OnChange>
						</Textentry>

					</Tab>
					<Tab name='Combat'>
						<checkbox name='cbAlwaysShieldBoost'>
							<X>10</X>
							<Y>10</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Always Shield Boost</Text>
							<AutoTooltip>Turn Shield Booster on full-time, instead of on-demand.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.AlwaysShieldBoost}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetAlwaysShieldBoost[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbLaunchCombatDrones'>
							<X>10</X>
							<Y>30</Y>
							<Height>20</Height>
							<Width>130</Width>
							<Text>Launch Combat Drones</Text>
							<AutoTooltip>Launch and Use Combat Drones</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.LaunchCombatDrones}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetLaunchCombatDrones[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbChainSpawns'>
							<X>10</X>
							<Y>50</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Chain Spawns</Text>
							<AutoTooltip>Will chain high value spawns if checked</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.ChainSpawns}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetChainSpawns[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbChainSolo'>
							<X>10</X>
							<Y>70</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Also Chain While Alone</Text>
							<AutoTooltip>If not checked chaining will be suspended if you are alone in a system.</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.ChainSolo}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetChainSolo[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbAnomalyAssistMode'>
							<X>10</X>
							<Y>90</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Use AnomalyAssistMode</Text>
							<AutoTooltip>Keeps the ratter stationary, ignores belts and players</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.AnomalyAssistMode}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetAnomalyAssistMode[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbReloadFromCan'>
							<X>10</X>
							<Y>110</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Restock Ammo From GSC</Text>
							<AutoTooltip>Warp to Ammo Bookmark to restock ammunition?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.RestockAmmo}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetRestockAmmo[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbOrbit'>
							<X>10</X>
							<Y>130</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Orbit NPC Targets</Text>
							<AutoTooltip>Orbit the current NPC target?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.Orbit}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetOrbit[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbOrbitAtOptimal'>
							<X>10</X>
							<Y>150</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Calculate Optimal (lasers only)</Text>
							<AutoTooltip>Attempt to calculate optimal?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.OrbitAtOptimal}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetOrbitAtOptimal[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbKeepAtRange'>
							<X>10</X>
							<Y>170</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>KeepAtRange NPC Targets</Text>
							<AutoTooltip>KeepAtRange the current NPC target?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.KeepAtRange}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetKeepAtRange[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbKeepAtRangeAtOptimal'>
							<X>10</X>
							<Y>190</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Calculate Optimal (lasers only)</Text>
							<AutoTooltip>Attempt to calculate optimal?</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.KeepAtRangeAtOptimal}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetKeepAtRangeAtOptimal[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbLootMyKills'>
							<X>10</X>
							<Y>210</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Loot My Kills</Text>
							<AutoTooltip>Loot the rats you kill</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.LootMyKills}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:SetLootMyKills[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbEnableDroneDefense'>
							<X>10</X>
							<Y>230</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Request Drone Defense against NPCs</Text>
							<AutoTooltip>Request Drone Defense from fleet - to respond, also enable launch combat drones, otherwise it's request only</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Combat.EnableDroneDefense}
								{
									This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Combat:EnableDroneDefense[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<Text name='MinimumDronesInSpaceText'>
							<X>200</X>
							<Y>10</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Min. Available Drones</Text>
							<AutoTooltip>We will return to base when available drones falls below this number</AutoTooltip>
						</Text>
						<Textentry name='MinimumDronesInSpace'>
							<X>375</X>
							<Y>10</Y>
							<Width>32</Width>
							<Height>18</Height>
							<MaxLength>2</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.MinimumDronesInSpace}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetMinimumDronesInSpace[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='WarpRangeText'>
							<X>200</X>
							<Y>30</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Belt Warp Range (m)</Text>
							<AutoTooltip>What range to warp to belts at. Default is 0</AutoTooltip>
						</Text>
						<Textentry name='WarpRange'>
							<X>350</X>
							<Y>30</Y>
							<Width>100</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.WarpRange}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetWarpRange[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblMinChainBounty'>
							<X>200</X>
							<Y>50</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Min Chain Bounty</Text>
							<AutoTooltip>NPC ships with a bounty above this value will be chained (if enabled).</AutoTooltip>
						</Text>
						<Textentry name='tbMinChainBounty'>
							<X>350</X>
							<Y>50</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.MinChainBounty}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetMinChainBounty[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblOrbitDistance'>
							<X>200</X>
							<Y>70</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Orbit Distance (m)</Text>
							<AutoTooltip>Distance you want to orbit the current target</AutoTooltip>
						</Text>
						<Textentry name='tbOrbitDistance'>
							<X>350</X>
							<Y>70</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.OrbitDistance}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetOrbitDistance[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblKeepAtRangeDistance'>
							<X>200</X>
							<Y>90</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>KeepAtRange Distance (m)</Text>
							<AutoTooltip>Distance you want to Keep the current target At Range</AutoTooltip>
						</Text>
						<Textentry name='tbKeepAtRangeDistance'>
							<X>350</X>
							<Y>90</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.KeepAtRangeDistance}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetKeepAtRangeDistance[${Int[${This.Text}]}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblAmmoTypeID'>
							<X>200</X>
							<Y>110</Y>
							<Width>110</Width>
							<Height>18</Height>
							<Text>Ammo TypeID</Text>
							<AutoTooltip>Name of bookmark where the ammo can is located.</AutoTooltip>
						</Text>
						<Textentry name='tbAmmoTypeID'>
							<X>350</X>
							<Y>110</Y>
							<Width>150</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.AmmoTypeID}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetAmmoTypeID[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblRestockFreeSpace'>
							<X>200</X>
							<Y>130</Y>
							<Width>120</Width>
							<Height>18</Height>
							<Text>Ammo Free Cargo</Text>
							<AutoTooltip>How much free space to leave in cargo after restocking ammo</AutoTooltip>
						</Text>
						<Textentry name='tbRestockFreeSpace'>
							<X>350</X>
							<Y>130</Y>
							<Width>150</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Combat.RestockAmmoFreeSpace}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Combat:SetRestockAmmoFreeSpace[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='lblAnomType'>
							<X>200</X>
							<Y>150</Y>
							<Width>120</Width>
							<Height>18</Height>
							<Text>Select Anom Type</Text>
							<AutoTooltip>This will be the Anom type we rat over and over again.</AutoTooltip>
						</Text>
						<combobox name='CurrentAnomType'>
							<X>350</X>
							<Y>130</Y>
							<Width>200</Width>
							<Height>18</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='0'>None</Item>
								<Item Value='1'>Guristas Sanctum</Item>
								<Item Value='2'>Guristas Haven (Rock)</Item>
								<Item Value='2.1'>Guristas Haven (Gas)</Item>
								<Item Value='2.3'>Guristas Haven (Both)</Item>
								<Item Value='3'>Guristas Forlorn Hub</Item>
								<Item Value='4'>Guristas Forsaken Hub</Item>
								<Item Value='5'>Guristas Hidden Hub</Item>
								<Item Value='110917'>Guristas Hub</Item>
								<Item Value='110932'>Guristas Port</Item>
								<Item Value='111338'>Guristas Forlorn Rally Point</Item>
								<Item Value='9'>Guristas Forsaken Rally Point</Item>
								<Item Value='111375'>Guristas Hidden Rally Point</Item>
								<Item Value='110902'>Guristas Rally Point</Item>
								<Item Value='31'>Guristas Yard</Item>
								<Item Value='111325'>Guristas Forlorn Den</Item>
								<Item Value='111329'>Guristas Forsaken Den</Item>
								<Item Value='113140'>Guristas Hidden Den</Item>
								<Item Value='32'>Guristas Den</Item>
								<Item Value='33'>Guristas Refuge</Item>
								<Item Value='34'>Guristas Burrow</Item>
								<Item Value='35'>Guristas Forlorn Hideaway</Item>
								<Item Value='36'>Guristas Forsaken Hideaway</Item>
								<Item Value='37'>Guristas Hidden Hideaway</Item>
								<Item Value='38'>Guristas Hideaway</Item>
								<Item Value='39'>Sansha Forsaken Hub</Item>
								<Item Value='40'>Sansha Haven (Rock)</Item>
								<Item Value='40.1'>Sansha Haven (Gas)</Item>
								<Item Value='40.3'>Sansha Haven (Both)</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Combat:SetCurrentAnomType[${This.SelectedItem.Value}]
								Script[EVEBot].VariableScope.Config.Combat:SetCurrentAnomTypeName[${This.SelectedItem.Text}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${Script[EVEBot].VariableScope.Config.Combat.CurrentAnomType}]
							</OnLoad>
						</combobox>
					</Tab>
					<Tab name='Fleeing'>
						<TabControl Name='FleeingTabcontrol' template='EVESkin.TabControl'>
							<x>0</x>
							<y>0</y>
							<width>100%</width>
							<height>100%</height>
							<Tabs>
								<Tab name='Options'>
									<frame name='FleeingFrame'>
										<x>0</x>
										<y>0</y>
										<width>100%</width>
										<height>100%</height>
										<children>
											<checkbox name='cbRunOnLowAmmo'>
												<X>10</X>
												<Y>10</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Low Ammo</Text>
												<AutoTooltip>If checked, run to safe spot when low on ammo.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowAmmo}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowAmmo[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbRunOnLowCap'>
												<X>10</X>
												<Y>30</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Low Cap</Text>
												<AutoTooltip>If checked, run to safe spot when capacitor is empty.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowCap}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowCap[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbRunOnLowTank'>
												<X>10</X>
												<Y>50</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Low Tank</Text>
												<AutoTooltip>If checked, run to safe spot when tank (shield or armor) has failed.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunOnLowTank}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunOnLowTank[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbRunToStation'>
												<X>10</X>
												<Y>70</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run To Station</Text>
												<AutoTooltip>If checked, run to a station instead of a safe-spot.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.RunToStation}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetRunToStation[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbUseWhiteList'>
												<X>10</X>
												<Y>90</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Non-Whitelisted Pilot</Text>
												<AutoTooltip>If checked, run to safe spot when any non-whitelisted pilot enters system.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.UseWhiteList}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetUseWhiteList[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbWLBypassStandings'>
												<X>50%</X>
												<Y>90</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Whitelist bypasses standings</Text>
												<AutoTooltip>If checked, "bad" standings will be checked for whitelisting before fleeing.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.WLBypassStandings}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetWLBypassStandings[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbUseBlackList'>
												<X>10</X>
												<Y>110</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Run On Blacklisted Pilot</Text>
												<AutoTooltip>If checked, run to safe spot when any blacklisted pilot enters system.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.UseBlackList}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetUseBlackList[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<combobox name='cbLowestStandingCombat'>
												<X>10</X>
												<Y>130</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='-11'>-11</Item>
													<Item Value='-10'>-10</Item>
													<Item Value='-5'>-5</Item>
													<Item Value='0'>0</Item>
													<Item Value='5'>5</Item>
													<Item Value='10'>10</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetLowestStanding[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.LowestStanding}].ID}]
												</OnLoad>
											</combobox>
											<Text name='lblLowestStandingCombat'>
												<X>65</X>
												<Y>130</Y>
												<Width>200</Width>
												<Height>18</Height>
												<Text>Min Acceptable Standing</Text>
												<AutoTooltip>The lowest standing pilot we tolerate in system before we flee. It goes to -11!</AutoTooltip>
											</Text>
											<checkbox name='cbIncludeNeutralInCalc'>
												<X>250</X>
												<Y>127</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Include Neutral (0.0) standings in standings check</Text>
												<AutoTooltip>If checked, include all 0.0 standings (includes corp, alliance, and personal)</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.IncludeNeutralInCalc}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetIncludeNeutralInCalc[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<slider name='MinArmorPct'>
												<X>210</X>
												<Y>10</Y>
												<Width>40</Width>
												<Height>18</Height>
												<Range>100</Range>
												<OnLoad>
													This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumArmorPct}]
													UIElement[EVEBot].FindUsableChild[MinArmorPctLabel,Text]:SetText["Minimum Armor: ${This.Value}"]
												</OnLoad>
												<OnChange>
													Script[EVEBot].VariableScope.Config.Combat:SetMinimumArmorPct[${Int[${This.Value}]}]
													UIElement[EVEBot].FindUsableChild[MinArmorPctLabel,Text]:SetText["Minimum Armor: ${This.Value}"]
												</OnChange>
											</slider>
											<Text name='MinArmorPctLabel'>
												<X>255</X>
												<Y>10</Y>
												<Width>150</Width>
												<Height>10</Height>
												<Text>Minimum Armor: 0</Text>
												<AutoTooltip>Lowest armor percent allowed before fleeing</AutoTooltip>
												<OnLoad>
													This:SetText["Minimum Armor: ${UIElement[EVEBot].FindUsableChild[MinArmorPct,slider].Value}"]
												</OnLoad>
											</Text>
											<slider name='MinShieldPct'>
												<X>210</X>
												<Y>30</Y>
												<Width>40</Width>
												<Height>18</Height>
												<Range>100</Range>
												<OnLoad>
													This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumShieldPct}]
													UIElement[EVEBot].FindUsableChild[MinShieldPctLabel,Text]:SetText["Minimum Shield: ${This.Value}"]
												</OnLoad>
												<OnChange>
													Script[EVEBot].VariableScope.Config.Combat:SetMinimumShieldPct[${Int[${This.Value}]}]
													UIElement[EVEBot].FindUsableChild[MinShieldPctLabel,Text]:SetText["Minimum Shield: ${This.Value}"]
												</OnChange>
											</slider>
											<Text name='MinShieldPctLabel'>
												<X>255</X>
												<Y>30</Y>
												<Width>150</Width>
												<Height>10</Height>
												<Text>Minimum Shield: 0</Text>
												<AutoTooltip>Lowest Shield Pct Allowed before Running</AutoTooltip>
												<OnLoad>
													This:SetText["Minimum Shield: ${UIElement[EVEBot].FindUsableChild[MinShieldPct,slider].Value}"]
												</OnLoad>
											</Text>
											<slider name='MinCapPct'>
												<X>210</X>
												<Y>50</Y>
												<Width>40</Width>
												<Height>18</Height>
												<Range>100</Range>
												<OnLoad>
													This:SetValue[${Script[EVEBot].VariableScope.Config.Combat.MinimumCapPct}]
													UIElement[EVEBot].FindUsableChild[MinCapPctLabel,Text]:SetText["Minimum Cap: ${This.Value}"]
												</OnLoad>
												<OnChange>
													Script[EVEBot].VariableScope.Config.Combat:SetMinimumCapPct[${Int[${This.Value}]}]
													UIElement[EVEBot].FindUsableChild[MinCapPctLabel,Text]:SetText["Minimum Cap: ${This.Value}"]
												</OnChange>
											</slider>
											<Text name='MinCapPctLabel'>
												<X>255</X>
												<Y>50</Y>
												<Width>150</Width>
												<Height>10</Height>
												<Text>Minimum Cap: 0</Text>
												<AutoTooltip>Lowest capacitor percent allowed before fleeing</AutoTooltip>
												<OnLoad>
													This:SetText["Minimum Cap: ${UIElement[EVEBot].FindUsableChild[MinCapPct,slider].Value}"]
												</OnLoad>
											</Text>
											<checkbox name='cbBreaks'>
												<X>10</X>
												<Y>180</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Take a break for               hours every                hours.</Text>
												<AutoTooltip>If checked, will dock your ship at your panic location every for a break according to the information specified.  Restart after changing these values.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.TakeBreaks}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetTakeBreaks[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<combobox name='comboBreakDuration'>
												<X>125</X>
												<Y>180</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='1'>1</Item>
													<Item Value='2'>2</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetBreakDuration[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.BreakDuration}].ID}]
												</OnLoad>
											</combobox>
											<combobox name='comboTimeBetweenBreaks'>
												<X>250</X>
												<Y>180</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='1'>1</Item>
													<Item Value='2'>2</Item>
													<Item Value='3'>3</Item>
													<Item Value='4'>4</Item>
													<Item Value='5'>5</Item>
													<Item Value='6'>6</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetTimeBetweenBreaks[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.TimeBetweenBreaks}].ID}]
												</OnLoad>
											</combobox>
											<checkbox name='cbBreakBroadcast'>
												<X>20</X>
												<Y>200</Y>
												<Height>20</Height>
												<Width>100</Width>
												<Text>Relay break to all sessions</Text>
												<AutoTooltip>If checked, will broadcast break to all sessions.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.BroadcastBreaks}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetBroadcastBreaks[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<checkbox name='cbSafeCooldown'>
												<X>10</X>
												<Y>150</Y>
												<Height>20</Height>
												<Width>20</Width>
												<Text>Wait               minutes after unsafe pilots have left system</Text>
												<AutoTooltip>If checked, will dock your ship at your panic location every for a break according to the information specified.  Restart after changing these values.</AutoTooltip>
												<OnLoad>
													if ${Script[EVEBot].VariableScope.Config.Combat.UseSafeCooldown}
													{
													This:SetChecked
													}
												</OnLoad>
												<OnLeftClick>
													Script[EVEBot].VariableScope.Config.Combat:SetUseSafeCooldown[${This.Checked}]
												</OnLeftClick>
											</checkbox>
											<combobox name='comboSafeCooldown'>
												<X>60</X>
												<Y>150</Y>
												<Width>50</Width>
												<Height>15</Height>
												<FullHeight>200</FullHeight>
												<ButtonWidth>20</ButtonWidth>
												<Items>
													<Item Value='5'>5</Item>
													<Item Value='10'>10</Item>
													<Item Value='20'>20</Item>
													<Item Value='30'>30</Item>
													<Item Value='40'>40</Item>
													<Item Value='60'>60</Item>
												</Items>
												<OnSelect>
													Script[EVEBot].VariableScope.Config.Combat:SetSafeCooldown[${This.SelectedItem.Value}]
												</OnSelect>
												<OnLoad>
													This:SetSelection[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Combat.SafeCooldown}].ID}]
												</OnLoad>
											</combobox>
										</children>
									</frame>
								</Tab>
								<Tab Name='Whitelist'>
									<text name='lblWLLocal'>
										<x>10</x>
										<y>10</y>
										<width>150</width>
										<height>10</height>
										<text>Local</text>
									</text>
									<listbox name='lbWLLocal'>
										<!-- TODO: on click, update selected info; name, corp, alliance, tooltips, etc. -->
										<x>10</x>
										<y>25</y>
										<width>130</width>
										<height>200</height>
										<sort>text</sort>
										<OnLeftClick>
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											variable pilot p = ${Local[${This.SelectedItem[1].Text}]}
											UIElement[${pilotinfo}]:SetText[Pilot: ${p.Name} (${p.CharID})]
											UIElement[${corpinfo}]:SetText[Corp ID: ${p.Corp.ID}]
											UIElement[${allianceinfo}]:SetText[Alliance: ${p.Alliance} (${p.AllianceID})]
										</OnLeftClick>

									</listbox>
									<button name='btnWLRefresh' template='EveSkin.Window.ClickButton'>
										<x>20</x>
										<y>235</y>
										<width>110</width>
										<height>22</height>
										<text>Refresh</text>
										<OnLeftClick>
											variable string lbname = ${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].FullName}
											variable index:pilot pilots
											variable iterator piter
											EVE:GetLocalPilots[pilots]
											pilots:GetIterator[piter]
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[""]
											UIElement[${corpinfo}]:SetText[""]
											UIElement[${allianceinfo}]:SetText[""]

											UIElement[${lbname}]:ClearItems
											if ${piter:First(exists)}
											{
											do
											{
											if !${piter.Value.CharID.Equal[${Me.CharID}]}
											UIElement[${lbname}]:AddItem[${piter.Value.Name}]
											}
											while ${piter:Next(exists)}
											}
											UIElement[${lbname}]:Sort

										</OnLeftClick>
									</button>
									<!-- Pilots -->
									<text name='lblWLPilots'>
										<x>r140</x>
										<y>10</y>
										<width>130</width>
										<height>10</height>
										<text>Pilot</text>
									</text>
									<listbox name='lbWLPilots'>
										<x>r140</x>
										<y>25</y>
										<width>130</width>
										<height>60</height>
										<sort>text</sort>
										<OnLoad>
											This:RightClick
										</OnLoad>
										<OnLeftClick>
											UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox]:ClearSelection
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[Pilot: ${This.SelectedItem[1].Text} ${This.SelectedItem[1].Value}]
											UIElement[${corpinfo}]:SetText[""]
											UIElement[${allianceinfo}]:SetText[""]
										</OnLeftClick>
										<OnRightClick>
											This:ClearItems
											variable iterator i
											Script[EVEBot].VariableScope.Whitelist.PilotsRef:GetSettingIterator[i]
											if ${i:First(exists)}
											{
											do
											{
											This:AddItem[${i.Key},${i.Value}]
											}
											while ${i:Next(exists)}
											}
											This:Sort
										</OnRightClick>
									</listbox>
									<button name='btnWLDelPilot' template='EveSkin.Window.ClickButton'>
										<x>r170</x>
										<y>35</y>
										<width>30</width>
										<height>40</height>
										<text>Del</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox].SelectedItem[1].Text}
											variable int64 pilotid=${UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox].SelectedItem[1].Value}
											Script[EVEBot].VariableScope.Social:DelWhiteList[Pilot,${pilotid},${pilotname}]
											UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox]:RightClick

										</OnLeftClick>
									</button>
									<button name='btnWLAddPilot' template='EveSkin.Window.ClickButton'>
										<x>r200</x>
										<y>35</y>
										<width>30</width>
										<height>40</height>
										<text>Add</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].SelectedItem[1].Text}
											variable int64 pilotid=${Local[${pilotname}].CharID}
											if !${pilotid.Equal[0]}
											{
											Script[EVEBot].VariableScope.Social:AddWhiteList[Pilot,${pilotid},${pilotname}]
											}
											UIElement[EVEBot].FindUsableChild[lbWLPilots,listbox]:RightClick
										</OnLeftClick>
									</button>
									<!-- Corps -->
									<text name='lblWLCorps'>
										<x>r140</x>
										<y>90</y>
										<width>130</width>
										<height>10</height>
										<text>Corp</text>
									</text>
									<listbox name='lbWLCorps'>
										<x>r140</x>
										<y>105</y>
										<width>130</width>
										<height>60</height>
										<sort>text</sort>
										<OnLoad>
											This:RightClick
										</OnLoad>
										<OnLeftClick>
											UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox]:ClearSelection
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[""]
											UIElement[${corpinfo}]:SetText[Corp: ${This.SelectedItem[1].Text} ${This.SelectedItem[1].Value}]
											UIElement[${allianceinfo}]:SetText[""]
										</OnLeftClick>
										<OnRightClick>
											This:ClearItems
											variable iterator i
											Script[EVEBot].VariableScope.Whitelist.CorporationsRef:GetSettingIterator[i]
											if ${i:First(exists)}
											{
											do
											{
											This:AddItem[${i.Key},${i.Value}]
											}
											while ${i:Next(exists)}
											}
											This:Sort
										</OnRightClick>

									</listbox>
									<button name='btnWLDelCorp' template='EveSkin.Window.ClickButton'>
										<x>r170</x>
										<y>115</y>
										<width>30</width>
										<height>40</height>
										<text>Del</text>
										<OnLeftClick>
											variable string corpname=${UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox].SelectedItem[1].Text}
											variable int64 corpid=${UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox].SelectedItem[1].Value}
											Script[EVEBot].VariableScope.Social:DelWhiteList[Corporation,${corpid},${corpname}]
											UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox]:RightClick
										</OnLeftClick>
									</button>
									<button name='btnWLAddCorp' template='EveSkin.Window.ClickButton'>
										<x>r200</x>
										<y>115</y>
										<width>30</width>
										<height>40</height>
										<text>Add</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].SelectedItem[1].Text}
											variable int64 corpid=${Local[${pilotname}].Corp.ID}
											if !${pilotid.Equal[0]}
											{
											Script[EVEBot].VariableScope.Social:AddWhiteList[Corporation,${corpid},(${pilotname}) ${corpid}]
											}
											UIElement[EVEBot].FindUsableChild[lbWLCorps,listbox]:RightClick
										</OnLeftClick>
									</button>
									<!-- Alliances -->
									<text name='lblWLAlliances'>
										<x>r140</x>
										<y>170</y>
										<width>130</width>
										<height>10</height>
										<text>Alliance</text>
									</text>
									<listbox name='lbWLAlliances'>
										<x>r140</x>
										<y>185</y>
										<width>130</width>
										<height>60</height>
										<sort>text</sort>
										<OnLoad>
											This:RightClick
										</OnLoad>
										<OnLeftClick>
											UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox]:ClearSelection
											variable string pilotinfo=${UIElement[EVEBot].FindUsableChild[txtPilotInfo,text].FullName}
											variable string corpinfo=${UIElement[EVEBot].FindUsableChild[txtCorpInfo,text].FullName}
											variable string allianceinfo=${UIElement[EVEBot].FindUsableChild[txtAllianceInfo,text].FullName}
											UIElement[${pilotinfo}]:SetText[""]
											UIElement[${corpinfo}]:SetText[""]
											UIElement[${allianceinfo}]:SetText[Alliance: ${This.SelectedItem[1].Text} ${This.SelectedItem[1].Value}]
										</OnLeftClick>
										<OnRightClick>
											This:ClearItems
											variable iterator i
											Script[EVEBot].VariableScope.Whitelist.AlliancesRef:GetSettingIterator[i]
											if ${i:First(exists)}
											{
											do
											{
											This:AddItem[${i.Key},${i.Value}]
											}
											while ${i:Next(exists)}
											}
											This:Sort
										</OnRightClick>
									</listbox>
									<button name='btnWLDelAlliance' template='EveSkin.Window.ClickButton'>
										<x>r170</x>
										<y>195</y>
										<width>30</width>
										<height>40</height>
										<text>Del</text>
										<OnLeftClick>
											variable string alliancename=${UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox].SelectedItem[1].Text}
											variable int64 allianceid=${UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox].SelectedItem[1].Value}
											Script[EVEBot].VariableScope.Social:DelWhiteList[Alliance,${allianceid},${alliancename}]
											UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox]:RightClick
										</OnLeftClick>
									</button>
									<button name='btnWLAddAlliance' template='EveSkin.Window.ClickButton'>
										<x>r200</x>
										<y>195</y>
										<width>30</width>
										<height>40</height>
										<text>Add</text>
										<OnLeftClick>
											variable string pilotname=${UIElement[EVEBot].FindUsableChild[lbWLLocal,listbox].SelectedItem[1].Text}
											variable int64 allianceid=${Local[${pilotname}].AllianceID}
											if !${pilotid.Equal[0]}
											{
											Script[EVEBot].VariableScope.Social:AddWhiteList[Alliance,${allianceid},(${pilotname}) ${allianceid}]
											}
											UIElement[EVEBot].FindUsableChild[lbWLAlliances,listbox]:RightClick
										</OnLeftClick>
									</button>
									<!-- Display of relevant info for local-selected, or list-selected item. -->
									<Text Name='txtPilotInfo'>
										<x>150</x>
										<y>25</y>
										<width>r355</width>
										<height>60</height>
										<wrap />
										<text>Select a pilot from the list at left.</text>
									</text>
									<Text Name='txtCorpInfo'>
										<x>150</x>
										<y>105</y>
										<width>r355</width>
										<height>60</height>
										<wrap />
										<text>This will populate with stuff based on your selection.</text>
									</text>
									<Text Name='txtAllianceInfo'>
										<x>150</x>
										<y>185</y>
										<width>r355</width>
										<height>60</height>
										<wrap />
										<text>This will show you alliance stuff.</text>
									</text>

									<button name='btnSyncWhitelists' template='EveSkin.Window.ClickButton'>
										<x>150</x>
										<y>r30</y>
										<width>r355</width>
										<height>20</height>
										<text>Synchronize Whitelist</text>
										<OnLeftClick>
											Script[EVEBot].VariableScope.Social:SyncWhitelist
										</OnLeftClick>
									</button>

								</Tab>

							</Tabs>
						</TabControl>
					</Tab>
					<Tab name='Missions'>
						<Text name='lblRunTheseTypes'>
							<X>10</X>
							<Y>10</Y>
							<Width>130</Width>
							<Height>18</Height>
							<Text>Run These Types</Text>
						</Text>
						<Frame name='frmMissionTypes'>
							<X>10</X>
							<Y>30</Y>
							<Height>100</Height>
							<Width>130</Width>
							<Border>2</Border>
							<Children>
								<checkbox name='cbRunCourierMissions'>
									<X>10</X>
									<Y>10</Y>
									<Height>20</Height>
									<Width>50</Width>
									<Text>Courier Missions</Text>
									<AutoTooltip>If checked, accept and complete courier missions.</AutoTooltip>
									<OnLoad>
										if ${Script[EVEBot].VariableScope.Config.Missioneer.RunCourierMissions}
										{
										This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[EVEBot].VariableScope.Config.Missioneer:SetRunCourierMissions[${This.Checked}]
									</OnLeftClick>
								</checkbox>
								<checkbox name='cbRunTradeMissions'>
									<X>10</X>
									<Y>30</Y>
									<Height>20</Height>
									<Width>50</Width>
									<Text>Trade Missions</Text>
									<AutoTooltip>If checked, accept and complete trade missions.</AutoTooltip>
									<OnLoad>
										if ${Script[EVEBot].VariableScope.Config.Missioneer.RunTradeMissions}
										{
										This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[EVEBot].VariableScope.Config.Missioneer:SetRunTradeMissions[${This.Checked}]
									</OnLeftClick>
								</checkbox>
								<checkbox name='cbRunMiningMissions'>
									<X>10</X>
									<Y>50</Y>
									<Height>20</Height>
									<Width>50</Width>
									<Text>Mining Missions</Text>
									<AutoTooltip>If checked, accept and complete mining missions.</AutoTooltip>
									<OnLoad>
										if ${Script[EVEBot].VariableScope.Config.Missioneer.RunMiningMissions}
										{
										This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[EVEBot].VariableScope.Config.Missioneer:SetRunMiningMissions[${This.Checked}]
									</OnLeftClick>
								</checkbox>
								<checkbox name='cbRunKillMissions'>
									<X>10</X>
									<Y>70</Y>
									<Height>20</Height>
									<Width>50</Width>
									<Text>Kill Missions</Text>
									<AutoTooltip>If checked, accept and complete kill missions.</AutoTooltip>
									<OnLoad>
										if ${Script[EVEBot].VariableScope.Config.Missioneer.RunKillMissions}
										{
										This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[EVEBot].VariableScope.Config.Missioneer:SetRunKillMissions[${This.Checked}]
									</OnLeftClick>
								</checkbox>
							</Children>
						</Frame>
						<Text name='lblShipNames'>
							<X>150</X>
							<Y>10</Y>
							<Width>130</Width>
							<Height>18</Height>
							<Text>Ship Names</Text>
						</Text>
						<Frame name='frmShipNames'>
							<X>150</X>
							<Y>30</Y>
							<Height>100</Height>
							<Width>340</Width>
							<Border>2</Border>
							<Children>
								<Text name='lblSmallHauler'>
									<X>10</X>
									<Y>10</Y>
									<Width>100</Width>
									<Height>18</Height>
									<Text>Small Hauler</Text>
									<AutoTooltip>Small Hauler (6000 m^3 or less).</AutoTooltip>
								</Text>
								<Textentry name='tbSmallHauler'>
									<X>120</X>
									<Y>10</Y>
									<Width>210</Width>
									<Height>18</Height>
									<MaxLength>64</MaxLength>
									<OnLoad>
										This:SetText[${Script[EVEBot].VariableScope.Config.Missioneer.SmallHauler}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
										Script[EVEBot].VariableScope.Config.Missioneer:SetSmallHauler[${This.Text}]
										}
									</OnChange>
								</Textentry>
								<Text name='lblLargeHauler'>
									<X>10</X>
									<Y>30</Y>
									<Width>100</Width>
									<Height>18</Height>
									<Text>Large Hauler</Text>
									<AutoTooltip>Large Hauler (more than 6000 m^3).</AutoTooltip>
								</Text>
								<Textentry name='tbLargeHauler'>
									<X>120</X>
									<Y>30</Y>
									<Width>210</Width>
									<Height>18</Height>
									<MaxLength>64</MaxLength>
									<OnLoad>
										This:SetText[${Script[EVEBot].VariableScope.Config.Missioneer.LargeHauler}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
										Script[EVEBot].VariableScope.Config.Missioneer:SetLargeHauler[${This.Text}]
										}
									</OnChange>
								</Textentry>
								<Text name='lblMiningShip'>
									<X>10</X>
									<Y>50</Y>
									<Width>100</Width>
									<Height>18</Height>
									<Text>Mining Ship</Text>
									<AutoTooltip>Mining Ship.</AutoTooltip>
								</Text>
								<Textentry name='tbMiningShip'>
									<X>120</X>
									<Y>50</Y>
									<Width>210</Width>
									<Height>18</Height>
									<MaxLength>64</MaxLength>
									<OnLoad>
										This:SetText[${Script[EVEBot].VariableScope.Config.Missioneer.MiningShip}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
										Script[EVEBot].VariableScope.Config.Missioneer:SetMiningShip[${This.Text}]
										}
									</OnChange>
								</Textentry>
								<Text name='lblCombatShip'>
									<X>10</X>
									<Y>70</Y>
									<Width>100</Width>
									<Height>18</Height>
									<Text>Combat Ship</Text>
									<AutoTooltip>Combat Ship.</AutoTooltip>
								</Text>
								<Textentry name='tbCombatShip'>
									<X>120</X>
									<Y>70</Y>
									<Width>210</Width>
									<Height>18</Height>
									<MaxLength>64</MaxLength>
									<OnLoad>
										This:SetText[${Script[EVEBot].VariableScope.Config.Missioneer.CombatShip}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
										Script[EVEBot].VariableScope.Config.Missioneer:SetCombatShip[${This.Text}]
										}
									</OnChange>
								</Textentry>
							</Children>
						</Frame>
						<Frame name='frmSalvageOptions'>
							<X>10</X>
							<Y>140</Y>
							<Height>40</Height>
							<Width>480</Width>
							<Border>2</Border>
							<Children>
								<Text name='lblSalvageMode'>
									<X>10</X>
									<Y>12</Y>
									<Width>110</Width>
									<Height>18</Height>
									<Text>Salvage Mode</Text>
									<AutoTooltip>Solo = switch to salvage ship.  Relay = relay to salvage bot.</AutoTooltip>
								</Text>
								<combobox name='comboSalvageMode'>
									<X>115</X>
									<Y>10</Y>
									<Width>75</Width>
									<Height>18</Height>
									<FullHeight>80</FullHeight>
									<ButtonWidth>20</ButtonWidth>
									<Items>
										<Item Value='1'>None</Item>
										<Item Value='2'>Solo</Item>
										<Item Value='3'>Relay</Item>
									</Items>
									<OnSelect>
										Script[EVEBot].VariableScope.Config.Missioneer:SetSalvageMode[${This.SelectedItem.Value}]
										Script[EVEBot].VariableScope.Config.Missioneer:SetSalvageModeName[${This.SelectedItem.Text}]
									</OnSelect>
									<OnLoad>
										This:SetSelection[${Script[EVEBot].VariableScope.Config.Missioneer.SalvageMode}]
									</OnLoad>
								</combobox>
								<Text name='lblSalvageShip'>
									<X>200</X>
									<Y>12</Y>
									<Width>100</Width>
									<Height>18</Height>
									<Text>Salvage Ship</Text>
									<AutoTooltip>Ship to use for solo salvaging.</AutoTooltip>
								</Text>
								<Textentry name='tbSalvageShip'>
									<X>300</X>
									<Y>10</Y>
									<Width>170</Width>
									<Height>18</Height>
									<MaxLength>64</MaxLength>
									<OnLoad>
										This:SetText[${Script[EVEBot].VariableScope.Config.Missioneer.SalvageShip}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
										Script[EVEBot].VariableScope.Config.Missioneer:SetSalvageShip[${This.Text}]
										}
									</OnChange>
								</Textentry>
							</Children>
						</Frame>
						<Frame name='frmGeneralOptions'>
							<X>10</X>
							<Y>190</Y>
							<Height>40</Height>
							<Width>480</Width>
							<Border>2</Border>
							<Children>
								<checkbox name='cbAvoidLowSec'>
									<X>10</X>
									<Y>10</Y>
									<Height>20</Height>
									<Width>50</Width>
									<Text>Avoid Lowsec</Text>
									<AutoTooltip>If checked, avoid missions that go into low-sec.</AutoTooltip>
									<OnLoad>
										if ${Script[EVEBot].VariableScope.Config.Missioneer.AvoidLowSec}
										{
										This:SetChecked
										}
									</OnLoad>
									<OnLeftClick>
										Script[EVEBot].VariableScope.Config.Missioneer:SetAvoidLowSec[${This.Checked}]
									</OnLeftClick>
								</checkbox>
								<Text name='lblSmallHaulerLimit'>
									<X>140</X>
									<Y>13</Y>
									<Width>160</Width>
									<Height>18</Height>
									<Text>Small Hauler Limit</Text>
									<AutoTooltip>Will use the large hauler for missions above this limit.</AutoTooltip>
								</Text>
								<Textentry name='tbSmallHaulerLimit'>
									<X>300</X>
									<Y>10</Y>
									<Width>50</Width>
									<Height>18</Height>
									<MaxLength>5</MaxLength>
									<OnLoad>
										This:SetText[${Script[EVEBot].VariableScope.Config.Missioneer.SmallHaulerLimit}]
									</OnLoad>
									<OnChange>
										if ${This.Text.Length} > 0
										{
										Script[EVEBot].VariableScope.Config.Missioneer:SetSmallHaulerLimit[${Int[${This.Text}]}]
										}
									</OnChange>
								</Textentry>
							</Children>
						</Frame>
					</Tab>

					<Tab name='Hauler'>
						<Text name='HaulerModeLabel'>
							<X>10</X>
							<Y>10</Y>
							<Width>70</Width>
							<Height>10</Height>
							<Text>Mode: </Text>
						</Text>
						<combobox name='HaulerMode'>
							<X>80</X>
							<Y>10</Y>
							<Width>250</Width>
							<Height>15</Height>
							<FullHeight>200</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='1'>Service Fleet Members</Item>
								<Item Value='2'>Service On-Demand</Item>
								<Item Value='3'>Service Orca</Item>
								<Item Value='4'>Jetcan Mode (Flip-guard)</Item>
								<Item Value='5'>Service Fleet Member</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Hauler:SetHaulerMode[${This.SelectedItem.Value}]
								Script[EVEBot].VariableScope.Config.Hauler:SetHaulerModeName[${This.SelectedItem.Text}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${Script[EVEBot].VariableScope.Config.Hauler.HaulerMode}]
							</OnLoad>
						</combobox>

						<checkbox Name='cbOrcaRunningEvebot'>
							<X>10</X>
							<Y>30</Y>
							<Height>20</Height>
							<Width>100</Width>
							<Text>Orca is running EVEBot</Text>
							<AutoTooltip>
								When checked, the hauler will wait at dropoff location for orca to broadcast cargo used.
								When unchecked, hauler will cycle endlessly without breaks.
							</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Hauler.OrcaRunningEvebot}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Hauler:SetOrcaRunningEvebot[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<Text name='MiningSystemLabel'>
							<X>10</X>
							<Y>80</Y>
							<Width>180</Width>
							<Height>10</Height>
							<Text>Mining System Bookmark</Text>
							<AutoTooltip>The bookmark name for the mining system location.</AutoTooltip>
						</Text>
						<Textentry name='MiningSystemBookmark'>
							<X>200</X>
							<Y>80</Y>
							<Width>250</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Hauler.MiningSystemBookmark}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Hauler:SetMiningSystemBookmark[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<Text name='HaulerPickupLabel'>
							<X>10</X>
							<Y>60</Y>
							<Width>180</Width>
							<Height>10</Height>
							<Text>Pickup Location</Text>
							<AutoTooltip>The name of the fleet member flying your orca</AutoTooltip>
						</Text>
						<Textentry name='HaulerPickupName'>
							<X>200</X>
							<Y>60</Y>
							<Width>250</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Hauler.HaulerPickupName}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Hauler:SetHaulerPickupName[${This.Text}]
								}
							</OnChange>
						</Textentry>
					</Tab>

					<Tab name='Freighter'>
						<Text name='lblFreighterMode'>
							<X>10</X>
							<Y>12</Y>
							<Width>70</Width>
							<Height>10</Height>
							<Text>Mode: </Text>
						</Text>
						<combobox name='cbFreighterMode'>
							<X>80</X>
							<Y>10</Y>
							<Width>225</Width>
							<Height>15</Height>
							<FullHeight>80</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Items>
								<Item Value='1'>Source and Destination</Item>
								<Item Value='2'>Asset Gather</Item>
								<Item Value='3'>Move Minerals to Buyer</Item>
								<Item Value='4'>Container Test</Item>
								<Item Value='5'>Mission Runner</Item>
								<Item Value='6'>Stealth Hauler</Item>
								<Item Value='7'>Scavenger</Item>
							</Items>
							<OnSelect>
								Script[EVEBot].VariableScope.Config.Freighter:SetFreighterMode[${This.SelectedItem.Value}]
								Script[EVEBot].VariableScope.Config.Freighter:SetFreighterModeName[${This.SelectedItem.Text}]
							</OnSelect>
							<OnLoad>
								This:SetSelection[${Script[EVEBot].VariableScope.Config.Freighter.FreighterMode}]
							</OnLoad>
						</combobox>
						<Text name='lblDestination'>
							<X>10</X>
							<Y>37</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Destination</Text>
							<AutoTooltip>The destination bookmark or station name.</AutoTooltip>
						</Text>
						<combobox name='teDestination'>
							<X>150</X>
							<Y>35</Y>
							<Width>375</Width>
							<Height>18</Height>
							<MaxLength>375</MaxLength>
							<FullHeight>350</FullHeight>
							<ButtonWidth>20</ButtonWidth>
							<Sort>Text</Sort>
							<Items>
								<Item Value='1'>None</Item>
							</Items>
							<OnLoad>
									This:SetSortType[Text]
									This:SetAutoSort[TRUE]

									variable index:bookmark bm_index
									EVE:GetBookmarks[bm_index]

									variable iterator bm_iterator
									bm_index:GetIterator[bm_iterator]
									This:ClearItems
									if ${bm_iterator:First(exists)}
									{
										do
										{
												This:AddItem[${bm_iterator.Value.Label},${bm_iterator.Value.ID}]
										}
										while ${bm_iterator:Next(exists)}
									}
									This:SelectItem[${This.ItemByText[${Script[EVEBot].VariableScope.Config.Freighter.Destination}].ID}]
									This:Sort
							</OnLoad>
							<OnSelect>
								if ${This.SelectedItem.Text.NotNULLOrEmpty}
								{
									Logger:Log["Freighter destination set to ${This.SelectedItem.Text}"]
									Script[EVEBot].VariableScope.Config.Freighter:SetDestination[${This.SelectedItem.Text}]
								}
							</OnSelect>
						</combobox>
						<Text name='lblSourcePrefix'>
							<X>10</X>
							<Y>62</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Source Bookmark Prefix</Text>
							<AutoTooltip>The prefix for source bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='teSourcePrefix'>
							<X>150</X>
							<Y>60</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Freighter.SourcePrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[EVEBot].VariableScope.Config.Freighter:SetSourcePrefix[${This.Text}]
								}
								else
								{
									Script[EVEBot].VariableScope.Config.Freighter:SetSourcePrefix[""]
								}
							</OnChange>
						</Textentry>
						<button	Name='Refresh Bookmarks' template='EveSkin.Window.ClickButton'>
							<X>350</X>
							<Y>60</Y>
							<Width>150</Width>
							<Height>18</Height>
							<text>Show Matching</text>
							<OnLeftClick>
								Freighter:BuildSourceList
							</OnLeftClick>
						</button>
						<Text name='lblRegionName'>
							<X>10</X>
							<Y>87</Y>
							<Width>280</Width>
							<Height>10</Height>
							<Text>Limit To Region</Text>
							<AutoTooltip>Leave blank to service all regions.</AutoTooltip>
						</Text>
						<Textentry name='teRegionName'>
							<X>150</X>
							<Y>85</Y>
							<Width>200</Width>
							<Height>18</Height>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Freighter.RegionName}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Freighter:SetRegionName[${This.Text}]
								}
							</OnChange>
						</Textentry>
						<listbox Name='PickupBookmarks'>
							<X>2%</X>
							<Y>50%</Y>
							<Height>47%</Height>
							<Width>96%</Width>
							<SelectMultiple>0</SelectMultiple>
							<Sort>Text</Sort>
							<AutoTooltip>Bookmarks which will be visited to pickup items</AutoTooltip>
							<OnLoad>
							</OnLoad>
							<OnSelect>
							</OnSelect>
						</listbox>
<!--
						<Frame name='frmNote'>
							<X>2%</X>
							<Y>50%</Y>
							<Height>47%</Height>
							<Width>96%</Width>
							<Border>2</Border>
							<Children>
								<Text name='lblNote'>
									<X>5</X>
									<Y>5</Y>
									<Width>98%</Width>
									<Height>98%</Height>
									<Wrap>1</Wrap>
									<Text>NOTE: Only "Source and Destination" mode works at the moment.  "Source and Destination" mode moves everything from stations who's bookmark begins with the source prefix to the destination station.  "Asset Gather" mode moves all assets shown in the asset window to the destination station.  You can optionally limit the freighter to a single system in this mode.  "Move Minerals to Buyer" mode picks up minerals and moves them to the highest bidder's station.  It does not sell the goods for you.</Text>
								</Text>
							</Children>
						</Frame>-->
					</Tab>
					<Tab name='Labels'>
						<Text name='Label1'>
							<X>10</X>
							<Y>10</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Bookmark Prefixes</Text>
						</Text>
						<Text name='SafeSpotsLabel'>
							<X>25</X>
							<Y>25</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Safe Spots</Text>
							<AutoTooltip>The prefix for safe spot bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='SafeSpotPrefix'>
							<X>230</X>
							<Y>25</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.SafeSpotPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetSafeSpotPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetSafeSpotPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='BeltBookMarkLabel'>
							<X>25</X>
							<Y>40</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Ore Belts</Text>
							<AutoTooltip>The prefix for ore belt bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='BeltBookMarkPrefix'>
							<X>230</X>
							<Y>40</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.OreBeltPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetOreBeltPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetOreBeltPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='IceBeltBookMarkLabel'>
							<X>25</X>
							<Y>55</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Ice Belts</Text>
							<AutoTooltip>The prefix for ice belt bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='IceBeltBookMarkPrefix'>
							<X>230</X>
							<Y>55</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.IceBeltPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetIceBeltPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetIceBeltPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='AmmoBookMarkLabel'>
							<X>25</X>
							<Y>70</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Ammo Supplies</Text>
							<AutoTooltip>The prefix for Ammo bookmark names.</AutoTooltip>
						</Text>
						<Textentry name='AmmoBookMarkPrefix'>
							<X>230</X>
							<Y>70</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.AmmoPrefix}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
								Script[EVEBot].VariableScope.Config.Labels:SetAmmoPrefix[${This.Text}]
								}
								else
								{
								Script[EVEBot].VariableScope.Config.Labels:SetAmmoPrefix[""]
								}
							</OnChange>
						</Textentry>
						<Text name='UndockInstaTagLabel'>
							<X>25</X>
							<Y>85</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Tag for Undock Instas</Text>
							<AutoTooltip>The string that undock insta bookmarks will contain. 1 space will be prepended and appended.</AutoTooltip>
						</Text>
						<Textentry name='UndockInstaTag'>
							<X>230</X>
							<Y>85</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.InstaUndockTag}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[EVEBot].VariableScope.Config.Labels:InstaUndockTag[${This.Text}]
								}
								else
								{
									Script[EVEBot].VariableScope.Config.Labels:InstaUndockTag[""]
								}
							</OnChange>
						</Textentry>
						<Text name='DockInstaTagLabel'>
							<X>25</X>
							<Y>100</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Tag for Dock Instas</Text>
							<AutoTooltip>The string that dock insta bookmarks will contain. 1 space will be prepended and appended.</AutoTooltip>
						</Text>
						<Textentry name='DockInstaTag'>
							<X>230</X>
							<Y>100</Y>
							<Width>100</Width>
							<Height>18</Height>
							<MaxLength>10</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Labels.InstaDockTag}]
							</OnLoad>
							<OnChange>
								if ${This.Text.Length} > 0
								{
									Script[EVEBot].VariableScope.Config.Labels:InstaDockTag[${This.Text}]
								}
								else
								{
									Script[EVEBot].VariableScope.Config.Labels:InstaDockTag[""]
								}
							</OnChange>
						</Textentry>
					</Tab>
					<Tab name='Fleet'>
						<checkbox name='cbUseFleet'>
							<X>10</X>
							<Y>12</Y>
							<Height>20</Height>
							<Width>50</Width>
							<Text>Manage Fleet</Text>
							<AutoTooltip>If checked, Evebot will manage your fleet</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Fleet.ManageFleet}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Fleet:SetManageFleet[${This.Checked}]
							</OnLeftClick>
						</checkbox>
						<checkbox name='cbIsLeader'>
							<X>10</X>
							<Y>42</Y>
							<Height>20</Height>
							<Width>50</Width>
							<Text>I am the leader</Text>
							<AutoTooltip>If checked, this character will invite your fleet.  Don't set more than one!</AutoTooltip>
							<OnLoad>
								if ${Script[EVEBot].VariableScope.Config.Fleet.IsLeader}
								{
								This:SetChecked
								}
							</OnLoad>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Fleet:SetIsLeader[${This.Checked}]
								if ${This.Checked}
								{
								UIElement[tbFleetLeader@Fleet@EVEBotOptionsTab@EVEBot]:SetText[]
								}
							</OnLeftClick>
						</checkbox>
						<Text name='label2'>
							<X>230</X>
							<Y>18</Y>
							<Width>200</Width>
							<Height>18</Height>
							<Text>Accept invites from</Text>
						</Text>
						<TextEntry name='tbFleetLeader'>
							<X>390</X>
							<Y>16</Y>
							<Width>150</Width>
							<Height>18</Height>
							<MaxLength>50</MaxLength>
							<OnLoad>
								This:SetText[${Script[EVEBot].VariableScope.Config.Fleet.FleetLeader}]
							</OnLoad>
							<OnChange>
								Script[EVEBot].VariableScope.Config.Fleet:SetFleetLeader[${This.Text}]
							</OnChange>
						</Textentry>
						<Text name='Label1'>
							<X>140</X>
							<Y>46</Y>
							<Width>200</Width>
							<Height>10</Height>
							<Text>Manage Fleet Member</Text>
							<AutoTooltip>Use this to add members to your fleet.  They must be in your corporation or in your contacts list.</AutoTooltip>
						</Text>
						<TextEntry name='tbAddFleetMember'>
							<X>300</X>
							<Y>40</Y>
							<Width>200</Width>
							<Height>18</Height>
							<MaxLength>50</MaxLength>
							<OnChange>
								if ${Script[EVEBot].VariableScope.Config.Fleet.IsWing["${This.Text.Escape}"]}
								UIElement[cbWing@Fleet@EVEBotOptionsTab@EVEBot]:SetChecked
								else
								UIElement[cbWing@Fleet@EVEBotOptionsTab@EVEBot]:UnsetChecked

							</OnChange>
						</Textentry>
						<button	Name='AddFleetMember' template='EVEskin.Add.Texture'>
							<X>505</X>
							<Y>41</Y>
							<Width>16</Width>
							<Height>16</Height>
							<OnLeftClick>
								if !${Script[EVEBot].VariableScope.Config.Fleet.IsListed[${UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot].Text}]}
								UIElement[FleetMembers@Fleet@EVEBotOptionsTab@EVEBot]:AddItem[${UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot].Text}]
								Script[EVEBot].VariableScope.Config.Fleet:AddFleetMember[${UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot].Text}]
								UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot]:SetText[]
							</OnLeftClick>
						</button>
						<button	Name='RemoveFleetMember' template='EVEskin.Remove.Texture'>
							<X>525</X>
							<Y>41</Y>
							<Width>16</Width>
							<Height>16</Height>
							<OnLeftClick>
								UIElement[FleetMembers@Fleet@EVEBotOptionsTab@EVEBot].ItemByText[${UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot].Text}]:Remove
								Script[EVEBot].VariableScope.Config.Fleet:RemoveFleetMember[${UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot].Text}]
							</OnLeftClick>
						</button>

						<checkbox name='cbWing'>
							<X>450</X>
							<Y>65</Y>
							<Height>20</Height>
							<Width>50</Width>
							<Text>Wing 2</Text>
							<AutoTooltip>If checked, this character will be moved to Wing 2.  Used for people you don't want warped with your fleet.</AutoTooltip>
							<OnLeftClick>
								Script[EVEBot].VariableScope.Config.Fleet:SetWingOne[${This.Checked}]
							</OnLeftClick>
						</checkbox>

						<listbox Name='FleetMembers'>
							<X>10</X>
							<Y>90</Y>
							<Width>530</Width>
							<Height>175</Height>
							<SelectMultiple>0</SelectMultiple>
							<Sort>Text</Sort>
							<AutoTooltip>These characters will be added to your fleet if EVEBot can find them in your Corporation or Contacts and "I am Leader" is checked.</AutoTooltip>
							<OnLoad>
								Script[EVEBot].VariableScope.Config.Fleet:RefreshFleetMembers
								variable iterator InfoFromSettings
								Script[EVEBot].VariableScope.Config.Fleet.FleetMembers:GetIterator[InfoFromSettings]
								if ${InfoFromSettings:First(exists)}
								{
								do
								{
								This:AddItem[${InfoFromSettings.Value.FleetMemberName}]
								}
								while ${InfoFromSettings:Next(exists)}
								}
							</OnLoad>
							<OnSelect>
								UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot]:SetText[${This.SelectedItem.Text}]
								if ${Script[EVEBot].VariableScope.Config.Fleet.IsWing[${UIElement[tbAddFleetMember@Fleet@EVEBotOptionsTab@EVEBot].Text}]}
								UIElement[cbWing@Fleet@EVEBotOptionsTab@EVEBot]:SetChecked
								else
								UIElement[cbWing@Fleet@EVEBotOptionsTab@EVEBot]:UnsetChecked
							</OnSelect>
						</listbox>
					</Tab>
				</Tabs>
			</TabControl>
		</Children>
	</window>
</ISUI>
